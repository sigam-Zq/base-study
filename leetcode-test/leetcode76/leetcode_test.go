package leetcode76

import (
	"fmt"
	"log"
	"strconv"
	"testing"
)

func TestXxx(t *testing.T) {

	for i, v := range []struct {
		f    func(*ListNode, *TreeNode) bool
		head *ListNode
		root *TreeNode
		want bool
	}{
		{
			f:    isSubPath,
			head: transListNode([]int{4, 2, 8}),
			root: transTreeNode([]int{1, 4, 4, -1, 2, 2, -1, 1, -1, 6, 8, -1, -1, -1, -1, 1, 3}),
			want: true,
		},
		{
			f:    isSubPath,
			head: transListNode([]int{1, 4, 2, 6}),
			root: transTreeNode([]int{1, 4, 4, -1, 2, 2, -1, 1, -1, 6, 8, -1, -1, -1, -1, 1, 3}),
			want: true,
		},
		{
			f:    isSubPath,
			head: transListNode([]int{4, 2}),
			root: transTreeNode([]int{4, 4, 4, 1, -1, -1, -1, 2}),
			want: false,
		},
		{
			f:    isSubPath,
			head: transListNode([]int{1, 10}),
			root: transTreeNode([]int{1, -1, 1, 10, 1, 9}),
			want: true,
		},
		{
			f:    isSubPath,
			head: transListNode([]int{2, 2, 1}),
			root: transTreeNode([]int{2, -1, 2, -1, 2, -1, 1}),
			want: true,
		},
		{
			f:    isSubPath,
			head: transListNode([]int{2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1}),
			root: transTreeNode([]int{2, -1, 1, -1, 2, -1, 2, -1, 2, -1, 1, 2, 2, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, -1, 2, 1, 2, -1, -1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, 1, 2, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, -1, 2, -1, 2, -1, 1, 1, 1, -1, -1, -1, 1, 2, 1, -1, -1, 1, 1, -1, -1, -1, 1, 2, 2, -1, -1, 1, 2, -1, -1, -1, 2, -1, 1, 1, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 1, 2, 2, -1, -1, 2, 1, -1, -1, -1, 1, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 2, 1, 2, -1, -1, 1, 1, -1, -1, -1, 2, -1, 2, -1, 1, 2, 1, -1, -1, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 2, 1, 1, -1, -1, -1, 1, -1, 2, -1, 1, -1, 2, 1, 1, -1, -1, 2, 2, -1, -1, 1, 2, -1, -1, -1, 1, -1, 2, -1, 2, 2, 1, -1, -1, -1, 1, -1, 2, -1, 2, -1, 2, 2, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, 2, 2, -1, -1, -1, 1, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, 2, 1, -1, -1, 1, 2, -1, -1, -1, 1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 2, 2, 1, -1, -1, 2, 1, -1, -1, -1, 2, -1, 1, -1, 2, 2, 2, -1, -1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, 1, 2, -1, -1, 1, 2, -1, -1, -1, 2, 1, 1, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 1, -1, 2, -1, 2, 1, 1, -1, -1, -1, 1, -1, 2, -1, 2, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 1, 1, 2, -1, -1, -1, 2, 2, 1, -1, -1, 1, 2, -1, -1, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, -1, 1, 1, 1, -1, -1, -1, 2, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 2, -1, 2, -1, 1, -1, 2, 1, 1, -1, -1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 2, 2, 2, -1, -1, -1, 2, -1, 2, 2, 2, -1, -1, -1, 1, -1, 2, -1, 1, 2, 2, -1, -1, -1, 2, 2, 2, -1, -1, 2, 1, -1, -1, -1, 2, -1, 1, -1, 1, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, -1, 1, 2, 1, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, 2, 1, -1, -1, -1, 1, 1, 2, -1, -1, 1, 1, -1, -1, -1, 1, 1, 2, -1, -1, 1, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 2, 2, 2, -1, -1, -1, 1, 2, 2, -1, -1, -1, 2, 2, 1, -1, -1, -1, 1, -1, 1, -1, 2, 1, 1, -1, -1, -1, 1, -1, 1, 1, 2, -1, -1, -1, 1, 1, 2, -1, -1, -1, 1, 1, 2, -1, -1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 1, 2, 1, -1, -1, 1, 2, -1, -1, 1, 1, -1, -1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 1, -1, 2, 1, 1, -1, -1, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 2, 2, 1, -1, -1, 1, 2, -1, -1, -1, 1, -1, 2, -1, 2, -1, 2, 2, 2, -1, -1, -1, 2, 1, 2, -1, -1, -1, 1, -1, 1, -1, 2, 1, 2, -1, -1, -1, 1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 1, 2, 2, -1, -1, -1, 1, -1, 1, 1, 2, -1, -1, -1, 1, -1, 2, -1, 2, 2, 1, -1, -1, 1, 2, -1, -1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 2, 2, 2, -1, -1, -1, 1, 2, 2, -1, -1, -1, 1, -1, 1, 2, 2, -1, -1, -1, 2, -1, 2, 2, 1, -1, -1, 2, 1, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, 2, 2, -1, -1, -1, 2, 1, 2, -1, -1, -1, 2, 2, 1, -1, -1, -1, 2, -1, 1, -1, 2, -1, 2, 1, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, 2, 2, -1, -1, 1, 1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, 1, 2, -1, -1, -1, 2, 2, 2, -1, -1, 1, 1, -1, -1, -1, 2, -1, 1, 2, 1, -1, -1, 2, 1, -1, -1, -1, 2, 2, 1, -1, -1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, -1, 2, 1, 1, -1, -1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 1, 2, 1, -1, -1, -1, 2, -1, 2, -1, 2, -1, 1, 2, 1, -1, -1, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, 1, 2, -1, -1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 2, 2, 1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, -1, 2, 1, 1, -1, -1, 1, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, 2, 1, -1, -1, -1, 2, -1, 2, -1, 2, -1, 2, -1, 1, 2, 2, -1, -1, -1, 1, -1, 2, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 2, -1, -1, -1, 1, -1, 2, -1, 1, -1, 2, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, 2, 2, -1, -1, 2, 1, -1, -1, -1, 2, -1, 2, -1, 1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 2, 2, -1, -1, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 2, 1, -1, -1, 1, 2, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 2, -1, 1, 1, 1, -1, -1, -1, 2, 2, 1, -1, -1, 2, 1, -1, -1, -1, 2, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 2, -1, 1, -1, 1, 1, 1, -1, -1, 1, 2, -1, -1, -1, 2, 2, 1, -1, -1, -1, 2, 2, 1, -1, -1, 1, 2, -1, -1, 1, 2, -1, -1, -1, 1, 2, 1, -1, -1, 2, 1, -1, -1, 2, 2, -1, -1, -1, 1, -1, 1, -1, 1, 2, 1, -1, -1, 1, 2, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 2, 1, -1, -1, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, 1, 2, -1, -1, 1, 1, -1, -1, -1, 2, 2, 2, -1, -1, 2, 1, -1, -1, -1, 1, 1, 2, -1, -1, 1, 1, -1, -1, -1, 2, -1, 2, 1, 1, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 2, -1, 2, 1, 2, -1, -1, 2, 1, -1, -1, -1, 2, 1, 1, -1, -1, 2, 1, -1, -1, -1, 1, -1, 2, -1, 1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 1, 2, 2, -1, -1, -1, 2, 1, 1, -1, -1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, 2, 1, -1, -1, 2, 1, -1, -1, -1, 1, 2, 2, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 2, -1, -1, 2, 1, -1, -1, -1, 2, 1, 2, -1, -1, 1, 2, -1, -1, 2, 1, -1, -1, 2, 2, -1, -1, 1, 1, -1, -1, -1, 1, 2, 2, -1, -1, -1, 2, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 2, 1, 2, -1, -1, 1, 2, -1, -1, -1, 2, 1, 1, -1, -1, -1, 2, -1, 2, 1, 1, -1, -1, -1, 1, 2, 1, -1, -1, 1, 2, -1, -1, 2, 2, -1, -1, 1, 2, -1, -1, -1, 1, 2, 2, -1, -1, 2, 1, -1, -1, -1, 2, -1, 2, -1, 2, 1, 2, -1, -1, -1, 1, 2, 1, -1, -1, -1, 1, 2, 1, -1, -1, 2, 1, -1, -1, 1, 2, -1, -1, -1, 1, -1, 2, 2, 2, -1, -1, 2, 1, -1, -1, -1, 1, 2, 1, -1, -1, 2, 2, -1, -1, -1, 1, -1, 2, 1, 2, -1, -1, -1, 1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 2, 1, -1, -1, -1, 1, -1, 1, -1, 2, 2, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 2, 2, 1, -1, -1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 2, 1, 1, -1, -1, -1, 2, -1, 2, 2, 1, -1, -1, -1, 2, -1, 1, 2, 1, -1, -1, 2, 2, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 2, 1, -1, -1, -1, 2, 1, 1, -1, -1, -1, 2, -1, 1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 1, -1, 1, -1, 1, -1, 2, 2, 1, -1, -1, -1, 1, 2, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 1, 1, 1, -1, -1, -1, 2, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, -1, 2, 1, 1, -1, -1, -1, 1, 2, 1, -1, -1, 2, 1, -1, -1, -1, 2, 1, 1, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, -1, 2, -1, 1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 2, 1, 1, -1, -1, 1, 2, -1, -1, -1, 1, -1, 2, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 2, -1, 2, -1, 2, 2, 1, -1, -1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, -1, 1, 2, 1, -1, -1, -1, 1, -1, 1, 2, 1, -1, -1, -1, 2, 1, 2, -1, -1, -1, 1, -1, 2, -1, 2, 1, 2, -1, -1, 2, 1, -1, -1, 2, 1, -1, -1, 2, 2, -1, -1, 1, 1, -1, -1, -1, 1, 2, 2, -1, -1, -1, 2, 2, 2, -1, -1, 2, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, 2, 2, -1, -1, -1, 2, -1, 2, 1, 2, -1, -1, -1, 1, -1, 2, 1, 2, -1, -1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 2, 2, 1, -1, -1, -1, 2, -1, 1, 1, 1, -1, -1, -1, 1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 2, 1, -1, -1, -1, 2, -1, 2, -1, 1, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, -1, 1, -1, 1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 2, -1, 1, -1, 1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 2, 1, 2, -1, -1, -1, 1, -1, 2, 2, 1, -1, -1, -1, 1, -1, 2, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 2, -1, 1, -1, 1, 1, 2, -1, -1, 2, 1, -1, -1, -1, 1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, 2, 2, -1, -1, 2, 1, -1, -1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, 1, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, 1, 1, -1, -1, 2, 2, -1, -1, -1, 2, 2, 1, -1, -1, -1, 2, 1, 1, -1, -1, -1, 2, -1, 2, -1, 2, -1, 1, -1, 2, 2, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 2, 1, 1, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, 1, 2, -1, -1, -1, 2, 1, 1, -1, -1, -1, 2, -1, 2, -1, 2, 1, 2, -1, -1, -1, 1, 1, 1, -1, -1, 1, 2, -1, -1, -1, 2, -1, 1, -1, 2, 1, 2, -1, -1, -1, 2, -1, 1, -1, 1, -1, 2, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 2, -1, -1, 2, 2, -1, -1, -1, 1, -1, 1, -1, 1, 2, 1, -1, -1, -1, 1, -1, 2, 1, 2, -1, -1, -1, 1, 1, 2, -1, -1, 1, 1, -1, -1, -1, 1, -1, 2, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 2, 2, 1, -1, -1, 2, 1, -1, -1, -1, 2, 2, 2, -1, -1, 2, 1, -1, -1, 2, 1, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 2, 1, 2, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 2, -1, 1, 2, 1, -1, -1, 2, 1, -1, -1, -1, 1, -1, 2, -1, 1, 1, 1, -1, -1, -1, 1, -1, 2, 1, 2, -1, -1, 1, 1, -1, -1, -1, 2, 2, 1, -1, -1, -1, 2, -1, 1, -1, 1, -1, 1, 2, 2, -1, -1, 1, 2, -1, -1, -1, 2, 1, 1, -1, -1, 1, 2, -1, -1, 1, 2, -1, -1, -1, 2, 2, 1, -1, -1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 1, 1, 2, -1, -1, 1, 1, -1, -1, -1, 2, 1, 1, -1, -1, -1, 2, 2, 1, -1, -1, -1, 1, -1, 1, 2, 1, -1, -1, -1, 2, -1, 2, -1, 1, 2, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 1, -1, 2, 2, 1, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 1, 2, 2, -1, -1, -1, 1, 2, 1, -1, -1, -1, 2, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, 2, 1, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, 2, 2, -1, -1, -1, 1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 2, -1, 2, 2, 1, -1, -1, -1, 2, -1, 1, -1, 2, 1, 1, -1, -1, -1, 2, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 2, 2, 1, -1, -1, -1, 1, -1, 1, 2, 1, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 2, -1, 2, 2, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, 2, 1, -1, -1, -1, 1, 2, 1, -1, -1, -1, 1, 1, 2, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, -1, 1, -1, 1, 1, 2, -1, -1, -1, 2, 2, 1, -1, -1, 1, 2, -1, -1, -1, 1, -1, 2, 1, 1, -1, -1, 2, 1, -1, -1, -1, 2, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 2, 1, -1, -1, -1, 2, -1, 1, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 2, 1, -1, -1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 2, -1, 2, -1, 1, -1, 2, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 1, 2, 1, -1, -1, -1, 2, -1, 2, 1, 1, -1, -1, -1, 2, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 1, -1, 1, 1, 1, -1, -1, 2, 2, -1, -1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, 2, 1, -1, -1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, -1, 1, 2, 1, -1, -1, -1, 2, 1, 2, -1, -1, -1, 2, -1, 1, -1, 1, 2, 2, -1, -1, 1, 2, -1, -1, -1, 2, 2, 1, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, 1, 1, -1, -1, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 2, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 2, -1, 2, 1, 2, -1, -1, -1, 2, -1, 2, 2, 1, -1, -1, 2, 1, -1, -1, -1, 1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 2, 2, 2, -1, -1, -1, 2, -1, 1, -1, 1, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 2, -1, 1, 1, 1, -1, -1, 2, 2, -1, -1, -1, 1, -1, 1, 1, 2, -1, -1, 1, 2, -1, -1, -1, 2, -1, 2, -1, 2, -1, 2, 1, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 2, -1, 1, -1, 2, 2, 2, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, 2, 1, -1, -1, 2, 1, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, 1, 2, -1, -1, -1, 1, -1, 2, 2, 1, -1, -1, 2, 1, -1, -1, 2, 2, -1, -1, -1, 1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 1, 2, 2, -1, -1, -1, 1, -1, 1, -1, 1, 1, 2, -1, -1, 2, 1, -1, -1, -1, 1, -1, 2, -1, 1, -1, 2, 1, 2, -1, -1, 1, 2, -1, -1, -1, 2, -1, 1, 2, 1, -1, -1, -1, 1, -1, 2, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, 1, 1, -1, -1, -1, 2, 2, 1, -1, -1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 2, -1, 1, -1, 1, 1, 1, -1, -1, -1, 2, -1, 1, -1, 2, 2, 1, -1, -1, -1, 2, -1, 2, 1, 2, -1, -1, -1, 2, 2, 2, -1, -1, -1, 2, -1, 2, -1, 1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 2, -1, 2, 2, 2, -1, -1, -1, 2, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 2, 2, -1, -1, 2, 1, -1, -1, -1, 2, -1, 1, -1, 2, -1, 2, 1, 1, -1, -1, 1, 2, -1, -1, 1, 2, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 1, 2, 2, -1, -1, 1, 1, -1, -1, -1, 2, -1, 1, -1, 1, -1, 2, 1, 1, -1, -1, -1, 2, -1, 1, -1, 2, 2, 1, -1, -1, -1, 2, -1, 2, 2, 1, -1, -1, -1, 1, 2, 1, -1, -1, -1, 2, -1, 1, 1, 2, -1, -1, -1, 2, -1, 2, 2, 1, -1, -1, -1, 2, -1, 1, -1, 2, -1, 2, 1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1, 2, -1, 2, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 2, 2, 1, -1, -1, 1, 1, -1, -1, -1, 2, -1, 1, -1, 1, 1, 2, -1, -1, 2, 1, -1, -1, -1, 2, -1, 2, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 2, -1, 2, 1, 1, -1, -1, -1, 2, 1, 2, -1, -1, 1, 2, -1, -1, 2, 2, -1, -1, -1, 1, -1, 2, -1, 1, -1, 1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 1, -1, 2, 1, 2, -1, -1, -1, 2, -1, 1, -1, 1, 1, 1, -1, -1, -1, 2, 1, 1, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 1, 2, 2, -1, -1, 1, 1, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, 1, 2, -1, -1, -1, 1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, 2, 1, -1, -1, -1, 2, -1, 1, 2, 2, -1, -1, -1, 1, -1, 2, -1, 2, 1, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 1, -1, 1, -1, 1, -1, 2, -1, 2, -1, 1, -1, 1, 1, 2, -1, -1, 2, 1, -1, -1, -1, 2, -1, 1, 2, 1, -1, -1, -1, 2, 2, 1, -1, -1, -1, 1, 2, 1, -1, -1, -1, 1, -1, 2, -1, 2, 2, 2, -1, -1, 1, 1, -1, -1, -1, 2, 2, 2, -1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 2, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 2, 2, 1, -1, -1, -1, 1, -1, 2, 1, 1, -1, -1, -1, 2, -1, 1, 2, 2, -1, -1, -1, 1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 2, -1, 2, 1, 2, -1, -1, 1, 2, -1, -1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 2, -1, 2, -1, 1, 2, 1, -1, -1, -1, 1, -1, 2, -1, 2, -1, 1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, -1, 2, -1, 2, 1, 2, -1, -1, -1, 1, -1, 2, 1, 1, -1, -1, -1, 1, -1, 2, -1, 2, 2, 2, -1, -1, -1, 2, -1, 2, -1, 1, 2, 2, -1, -1, -1, 1, -1, 2, 2, 1, -1, -1, 1, 1, -1, -1, -1, 1, -1, 2, 2, 1, -1, -1, 2, 1, -1, -1, -1, 1, -1, 1, 2, 2, -1, -1, 2, 2, -1, -1, 1, 2, -1, -1, -1, 1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 2, 1, 1, -1, -1, -1, 2, -1, 2, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, -1, 2, 1, 2, -1, -1, 2, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 2, 1, -1, -1, -1, 1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 2, -1, 2, -1, 1, -1, 1, 2, 1, -1, -1, -1, 1, -1, 2, 2, 1, -1, -1, 1, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 2, 2, 1, -1, -1, 1, 2, -1, -1, -1, 1, 1, 2, -1, -1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 1, -1, 2, -1, 1, -1, 2, -1, 2, -1, 1, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, 1, 1, -1, -1, -1, 2, -1, 2, -1, 2, -1, 2, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, 2, 1, -1, -1, 1, 2, -1, -1, -1, 1, 1, 2, -1, -1, 2, 2, -1, -1, -1, 1, 2, 2, -1, -1, 1, 1, -1, -1, -1, 1, 1, 2, -1, -1, -1, 1, 1, 2, -1, -1, 1, 1, -1, -1, -1, 1, 1, 2, -1, -1, -1, 2, -1, 1, -1, 1, -1, 2, 2, 2, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 2, 1, 2, -1, -1, 2, 2, -1, -1, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, 2, 1, -1, -1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, -1, 2, -1, 1, 2, 1, -1, -1, -1, 2, -1, 2, 2, 2, -1, -1, -1, 2, -1, 1, -1, 1, -1, 1, -1, 1, -1, 2, -1, 1, 2, 1, -1, -1, -1, 2, -1, 2, -1, 1, -1, 1, -1, 1, 2, 1, -1, -1, -1, 2, -1, 2, 1, 2, -1, -1, -1, 1, 2, 2, -1, -1, 1, 2, -1, -1, 1, 2, -1, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 1, -1, 2, -1, 2, -1, 1, -1, 2, -1, 1, -1, 1, 2, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 2, -1, 2, -1, 2, -1, 1, -1, 1, -1, 1, -1, 2, 1, 2, -1, -1, -1, 1, 2, 1, -1, -1, 1, 1, -1, -1, -1, 2, -1, 1, -1, 1, -1, 1, 2, 2, -1, -1, -1, 2, -1, 2, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 2, -1, 2, -1, 2, -1, 2, -1, 1}),
			want: true,
		},
	} {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			got := v.f(v.head, v.root)
			if got != v.want {
				t.Errorf("got %v want %v", got, v.want)
			}
		})
	}
}

// Definition for singly-linked list.
type ListNode struct {
	Val  int
	Next *ListNode
}

// Definition for a binary tree node.
type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}

func isSubPath(head *ListNode, root *TreeNode) bool {

	list := make([]int, 0)
	// 超出内存限制 cur = head.Next 导致无限增殖
	// for cur := head; cur != nil; cur = head.Next {
	for cur := head; cur != nil; cur = cur.Next {
		list = append(list, cur.Val)
	}
	n := len(list)
	// 前缀表（KMP） 不匹配情况 得到回退个数  请看下一个解
	// lastTable := make(map[int]int)
	var dfs func(r *TreeNode, laryer int) bool
	dfs = func(r *TreeNode, laryer int) bool {
		if laryer == n {
			return true
		}

		if r == nil {
			return false
		}
		if r.Val == list[laryer] {
			return dfs(r.Left, laryer+1) || dfs(r.Right, laryer+1)
		} else {
			init := laryer
			if r.Val != list[0] {
				init = 0
			}
			return dfs(r.Left, init) || dfs(r.Right, init)
		}
	}
	// dfs(root, 0)
	return dfs(root, 0)
}

func isSubPathCopilot(head *ListNode, root *TreeNode) bool {

	list := make([]int, 0)
	for cur := head; cur != nil; cur = cur.Next {
		list = append(list, cur.Val)
	}
	n := len(list)

	// 构建前缀表
	prefixTable := make([]int, n)
	j := 0
	for i := 1; i < n; i++ {
		for j > 0 && list[i] != list[j] {
			j = prefixTable[j-1]
		}
		if list[i] == list[j] {
			j++
		}
		prefixTable[i] = j
	}
	log.Println("prefixTable")
	log.Println(prefixTable)
	var dfs func(r *TreeNode, laryer int) bool
	dfs = func(r *TreeNode, laryer int) bool {
		if laryer == n {
			return true
		}

		if r == nil {
			return false
		}

		if r.Val == list[laryer] {
			return dfs(r.Left, laryer+1) || dfs(r.Right, laryer+1)
		} else {
			if laryer > 0 {
				return dfs(r, prefixTable[laryer-1])
			}
			return dfs(r.Left, 0) || dfs(r.Right, 0)
		}
	}

	return dfs(root, 0)
}

// 作者：力扣官方题解
// 链接：https://leetcode.cn/problems/linked-list-in-binary-tree/solutions/122916/er-cha-shu-zhong-de-lie-biao-by-leetcode-solution/
// 来源：力扣（LeetCode）
// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
func isSubPathLeetCode(head *ListNode, root *TreeNode) bool {
	if root == nil {
		return false
	}
	return dfs(root, head) || isSubPathLeetCode(head, root.Left) || isSubPathLeetCode(head, root.Right)
}

func dfs(rt *TreeNode, head *ListNode) bool {
	// 链表已经全部匹配完，匹配成功
	if head == nil {
		return true
	}
	// 二叉树访问到了空节点，匹配失败
	if rt == nil {
		return false
	}
	// 当前匹配的二叉树上节点的值与链表节点的值不相等，匹配失败
	if rt.Val != head.Val {
		return false
	}
	return dfs(rt.Left, head.Next) || dfs(rt.Right, head.Next)
}

func transListNode(in []int) (out *ListNode) {

	var currentPoint *ListNode
	if len(in) == 0 {
		return nil
	}
	out = &ListNode{Val: in[0]}
	currentPoint = out
	for _, v := range in[1:] {
		currentPoint.Next = &ListNode{
			Val:  v,
			Next: nil,
		}
		currentPoint = currentPoint.Next
	}

	return out
}

func transTreeNode(in []int) (out *TreeNode) {
	n := len(in)

	var curList []*TreeNode
	out = &TreeNode{Val: in[0]}
	curList = append(curList, out)

	for step := 1; step < n; {
		var nextCur []*TreeNode
		for _, cur := range curList {
			if step < n && in[step] != -1 {
				cur.Left = &TreeNode{
					Val: in[step],
				}
				nextCur = append(nextCur, cur.Left)

			}
			step++
			if step < n && in[step] != -1 {
				cur.Right = &TreeNode{
					Val: in[step],
				}
				nextCur = append(nextCur, cur.Right)

			}
			step++
		}
		curList = nextCur
	}

	return out
}

func TestTransList(t *testing.T) {

	out := transListNode([]int{4, 2, 8})
	fmt.Println("out")
	fmt.Println(out)
	walkListNodePrint(out)
}

func TestTransTree(t *testing.T) {
	// transTreeNode([]int{1, 4, 4, -1, 2, 2, -1, 1, -1, 6, 8, -1, -1, -1, -1, 1, 3})
	out := transTreeNode([]int{1, 4, 4, -1, 2, 2, -1, 1, -1, 6, 8, -1, -1, -1, -1, 1, 3})

	// fmt.Println("out")
	// fmt.Println(out)
	walkTreeNodePrint(out)

}

func walkListNodePrint(out *ListNode) {
	var dfs func(o *ListNode)
	dfs = func(o *ListNode) {
		if o == nil {
			fmt.Println()
			return
		}
		fmt.Printf("%d ->", o.Val)
		dfs(o.Next)
	}
	dfs(out)
}
func walkTreeNodePrint(out *TreeNode) {

	nextCur := make([]*TreeNode, 0)
	nextCur = append(nextCur, out)
	for i := 0; len(nextCur) > 0; i++ {
		var tmp []*TreeNode
		for _, vv := range nextCur {
			if vv != nil {
				fmt.Printf("\t %d \t", vv.Val)

				if vv.Left != nil {
					tmp = append(tmp, vv.Left)
				}
				if vv.Right != nil {
					tmp = append(tmp, vv.Right)
				}
			}
		}
		nextCur = tmp
		fmt.Println()
	}

}

func TestAdd(t *testing.T) {

	for i := 0; i < 16; i = 1<<i - 1 {
		t.Log(i)
		i++
	}
}
